from django.contrib import admin
from .models import Customer, CustomerNote, Notification

@admin.register(Customer)
class CustomerAdmin(admin.ModelAdmin):
    list_display = (
        'email', 
        'first_name', 
        'last_name', 
        'phone', 
        'loyalty_points',
        'total_purchases',
        'is_active',
        'created_at'
    )
    list_filter = ('is_active', 'created_at', 'preferred_language')
    search_fields = ('email', 'first_name', 'last_name', 'phone')
    readonly_fields = ('created_at', 'updated_at', 'last_login')
    ordering = ('-created_at',)
    
    fieldsets = (
        ('Account Information', {
            'fields': ('email', 'password', 'is_active', 'is_staff', 'is_superuser')
        }),
        ('Personal Information', {
            'fields': ('first_name', 'last_name', 'phone', 'date_of_birth')
        }),
        ('Address', {
            'fields': ('street_address', 'city', 'province', 'postal_code', 'country')
        }),
        ('Preferences', {
            'fields': ('preferred_language', 'dietary_preferences', 'favorite_products')
        }),
        ('Loyalty & Purchases', {
            'fields': ('loyalty_points', 'total_purchases', 'last_purchase_date')
        }),
        ('Notifications', {
            'fields': ('email_notifications', 'sms_notifications', 'push_notifications')
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at', 'last_login'),
            'classes': ('collapse',)
        }),
    )


@admin.register(CustomerNote)
class CustomerNoteAdmin(admin.ModelAdmin):
    list_display = ('customer', 'note_preview', 'created_by', 'created_at')
    list_filter = ('created_at',)
    search_fields = ('customer__email', 'customer__first_name', 'customer__last_name', 'note')
    readonly_fields = ('created_at', 'updated_at')
    
    def note_preview(self, obj):
        return obj.note[:50] + '...' if len(obj.note) > 50 else obj.note
    note_preview.short_description = 'Note'


@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    list_display = (
        'title', 
        'customer', 
        'notification_type', 
        'is_read', 
        'is_active',
        'created_at',
        'expires_at'
    )
    list_filter = ('notification_type', 'is_read', 'is_active', 'created_at')
    search_fields = ('title', 'message', 'customer__email', 'customer__first_name', 'customer__last_name')
    readonly_fields = ('created_at',)
    
    fieldsets = (
        ('Notification Details', {
            'fields': ('customer', 'title', 'message', 'notification_type')
        }),
        ('Status', {
            'fields': ('is_read', 'is_active', 'expires_at')
        }),
        ('Metadata', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    # Fix the form to prevent AttributeError
    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)
        # Ensure customer field shows email instead of object representation
        if 'customer' in form.base_fields:
            form.base_fields['customer'].label_from_instance = lambda obj: f"{obj.email} - {obj.first_name} {obj.last_name}"
        return form
    
    # Bulk actions
    actions = ['mark_as_read', 'mark_as_unread', 'activate', 'deactivate']
    
    def mark_as_read(self, request, queryset):
        updated = queryset.update(is_read=True)
        self.message_user(request, f'{updated} notification(s) marked as read.')
    mark_as_read.short_description = "Mark selected as read"
    
    def mark_as_unread(self, request, queryset):
        updated = queryset.update(is_read=False)
        self.message_user(request, f'{updated} notification(s) marked as unread.')
    mark_as_unread.short_description = "Mark selected as unread"
    
    def activate(self, request, queryset):
        updated = queryset.update(is_active=True)
        self.message_user(request, f'{updated} notification(s) activated.')
    activate.short_description = "Activate selected notifications"
    
    def deactivate(self, request, queryset):
        updated = queryset.update(is_active=False)
        self.message_user(request, f'{updated} notification(s) deactivated.')
    deactivate.short_description = "Deactivate selected notifications"